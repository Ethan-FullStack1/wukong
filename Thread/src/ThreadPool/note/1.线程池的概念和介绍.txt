1.如果是不使用线程池，每个任务都会新开一个线程处理，
    一个线程
    for循环创建线程
    当任务数量上升到1000
2.这样开销太大，我们希望有固定数量的线程，来执行这1000个线程，这样就避免了反复创建并销毁线程所带来的开销问题
3.为什么要使用线程池？
    1.问题一：反复创建线程开销大
    2.问题二：过多的线程会占用太多内存

    3.解决以上两个问题思路
        1.用少量的线程 -- 避免内存占用过时多
        2.让这部分线程都保持工作，且可以反复执行任务 -- 避免生命周期的损耗
4.线程池的好处
    1.加快响应速度
    2.合理使用CPU和内存
    3.统一管理
5.线程池是和应用的场合
    1.服务器收到大量请求时，使用线程池技术是非常合适的，它可以大大减少线程的创建和销毁次数，提高服务器的工作效率
    2.实际上，在开发中，如果需要创建5个以上的线程，那么就可以使用线程池来管理
6.如何创建和停止线程池
    1.创建线程池
        1.线程池构造函数的参数
        2.线程池应该手动创建还是自动创建？
        3.线程池的线程数量设定为多少比较合适？
    2.线程池构造函数和参数
        参数名           类型              含义
        corePoolSize    int               核心线程数
        maxPoolSize     int               最大线程数
        keepAliveTime   long              保持存活时间
        workQueue       BlokingQueue      任务存储队列
        threadFactory   ThreadFactory     当线程池需要新的线程的时候，会使用ThreadFactory来生成新的线程
        Handler         RejectedExcutionHandler 由于线程池无法接受你所提交的任务的拒绝策略
    3.参数说明
        1.参数中的corePoolSize和maxPoolSize
            1.corePoolSize指的是核心线程数：线程池在完成初始化后，默认情况下，线程池中并没有任何线程，线程池会等待有任务到来时，
            在创建新线程去执行任务
            2.线程池有可能会在核心线程数上额外增加一些线程，但是这些新增加的线程数有一个上限，这就是最大量maxPoolSize。
            3.添加线程规则
                1.如果线程数小于corPoolSize，即使其它工作处于空闲状态，也会创建一个县线程来来运行新任务。
                2.如果线程数等于(或大于)corePoolSize但少于maximumPoolSize,则将任务放入队列。
                3.如果说是队列已满，并且线程数小于maxPoolSize,则创建一个新线程来运行任务。
                4.如果队列已满，并且线程数大于(或等于)maxPoolSize，则拒绝该任务。
                5.是否需要添加线程的判断顺序是：
                    1.corePoolSize(先判断核心线程数满了没有)
                    2.workQueue(在判断任务存储队列满了没有)
                    3.maxPoolSize(最大的线程数量满了没有)
                    4.如果全满的话，执行线程Handler参数拒绝策略
                6.增减线程的特点：
                    1.通过设置corePoolSize和maxPoolSize大小相同的，就可以创建固定大小的线程池。
                    2.线程池希望保持较少的线程数并且只有在负载变得很大时才增加它。
                    3.通过设置maximumPoolSize为很高的值，例如Integer.MAX_VALUE,可以允许线程池容纳任意数量的并发任务。
                    4.是只有在队列填满时才创建多余corePoolSize的线程，所以如果你使用的是无界队列(例如LinkedBlockingQueue),那么
                    线程数就不会超过corePoollSize。
                7.keepAliveTime
                    1.如果线程池当前的线程数多于corePoolSize，那么多余的线程空闲时间超过keepAliveTime,那么就会被终止
                8.ThreadFactory 来创建线程
                    1.新的线程都是由ThreadFactory创建的，默认使用Excutors.defaultThreadFactory(),创建出来的线程都在同一个线程组，拥有同
                    样的NORM_PRIORITY优先级并且都是守护线程。如果自己指定ThreadFactory，那么就可以改变线程名、线程组、优先级、是否是守护线程等。
                    2.通常我们用默认的ThreadFactory就可以了
                9.workQueue(工作队列)
                    1.有三种常见的队列类型：
                        1.直接交接：SynchronousQueue(任务不是特别多的时间去使用)
                        2.无界队列：LinkedBlockingQueue(这个线程队列不会被塞满)
                        3.有界队列：ArrayBlockingQueue(可以设置队列大小)
                10.线程池应该手动创建还是自动创建？
                    1.手动创建更好，应为这样可以让我们更加明确线程池的运行规则，避免资源耗尽的风险。
                    2.让我们来看看自动创建线程池(也就是直接调用JDK封装好的构造函数)可能带来哪些问题？
                        1.newFixedThreadPool
                            由于传进去的LinkedBlockingQueue时没有容量上限的，所以当请求数越来越多，并且无法及时处理完毕的时候，
                            也就是请求堆积的时候，会哦让那个易造成占用大量的内存，可能会导致OOM
                        2.newSingleThreadExecutor
                            可以看出，这里和刚才的newFixedThreadPool得原理基本一样，只不过把线程数直接设置成了1，所以这也导致同样的问题，也就是
                            当请求堆积的时候，可能会占用大量的内存
                        3.newCachedThreadPool
                            1.可缓存线程池
                            2.特点：无界线程池，具有自动回收多余线程的功能
                        4.ScheduledThreadPool
                            1.支持定时以及周期性任务执行的线程池，
                 11.正确的创建线程池的方法，
                    1.根据不同的业务场景，自己设置线程池参数，比如我们的内存有多大？我们想给线程取什么名字等等
                 12.线程池里的线程数量设定为多少比较合适？
                    1.CPU密执行(加密、计算hash等)：最佳线程数为cpu核心数的1-2倍左右。
                    2.耗时IO型(读写数据库、文件、网络读写等)：最佳线程数一般会小于CPU核心数很多倍，以JVM线程监控显示繁忙情况为依据，保证线程空闲
                    可以衔接上，参考Brain Goatz推荐的计算方法：
                        线程数 = CPU核心数 * (1 + 平均等待时间/平均工作时间)
                 13.常见线程池的特点
                    1.固定数量的线程池，只会让你当前规定的最大线程数来执行这些个任务，不会超过(FixedThreadPool)
                    2.可缓存，线程池，支持自动回收多余线程(CachedThreadPool)
                    3.支持定时和周期性执行任务(ScheduledThreadPool)
                    4.单一线程数去执行任务(SingleThreadExecutors)
                        1.单线程的线程池:他只会用唯一的工作线程来执行任务
                        2.它的原理和FixedThreadPool是一样的，但是此时的线程数量被设置成了1
                    5.以上四种线程池的构造函数的参数
                        parameter           FixedThreadPool     CacheThreadPool         ScheduledThreadPool         SingleThreadPool
                        corePoolSize        constructor-arg     0                       constructor-arg             1
                        maxPoolSize         same as corePoolSize Integer.MAX_VALUE      Integer.MAX_VALUE           1
                        keepAliveTime       0 seconds           60 seconds              0                           0 seconds
                 14.阻塞队列分析
                    1.FixedThreadPool和SingleThreadExecutor的Queue是LinkedBlockingQueue?
                    2.CachedThreadPool使用的Queue是SynchronousQueue？
                    3.ScheduledThreadPool来说，他使用的是延迟队列DelayedWorkQueue
                 15.workStealingPool是1.8加入的新线程池
                    1.这个线程池和之前的都有很大的不同
                    2.子任务
                    3.窃取


    4.停止线程池(停止线程池的正确方法)
        1.shutdown    直接关闭线程池执行任务，但是会继续执行未执行完毕的的线程任务
        2.isShutdown
            查看线程池是否被关闭。返回布尔
        3.isTerminated
            他返回我们的线程是不是已经完全终止了，就是说他里面的线程包括正在执行的任务，包括队列里面的任务，如果都清空了，那么这种情况下
            他才是isTerminated。
        4.awaitTermination
            它是等待一段时间，如果说在等待的这段时间内呢，如果说是线程执行完毕了，这个方法会返回一个Boolean值，他会返回TRUE，没执行完毕呢
            ，他就会返回false
        5.shutDownNow
            立马停止所有线程正在执行的任务，返回存在队列中的任务列表
    5.任务太多，还怎么拒绝？
        1.拒绝时机
            1.当Executor关闭时，提交新任务会被拒绝
            2.以及当Executor对最大线程和工作队列容量使用有线边界已经饱和时。
        2.4种拒绝策略
            1.AbortPolicy:直接抛出异常，告诉你新任务你没有执行成功
            2.DiscardPolicy:如果是线程池没有能力处理你的任务的时间，他就会默默地把你的任务丢弃。你不会得到任何通知，所以你也不知道这个任务得没得到处理
            3.DiscardOldestPolicy:如果你新任务来了，并且又是这种拒绝策略，把队列中最老的，存在时间最长的那个任务，给丢掉，以便腾出空间来存放你刚刚提交的那个任务。
            4.CallerRunsPolicy:如果我这个线程池没八法处理你的任务了，谁提叫这个任务，这就帮我去跑，比如说我们主线程给线程池去提交任务，那么线程池真的是已经没有办法去
            容纳了，他已经是饱和了，那么这个时候就会让这个主线程，提交任务的这个线程去执行。
        3.钩子方法，给线程池加点料。
            1.每个任务执行前后
            2.日志、统计
            3.代码演示


7.线程池实现原理，源码分析
    1.线程池组成部分
        1.线程池管理器
        2.工作线程
        3.任务队列
        4.任务接口(Task)

    2.Executor家族？
        1.线程池，ThreadPoolExecutor、ExecutorService、Executor、Executors等这么多和线程池线相关的类，大家都是什么关系？
            Executor<--ExecutorService<--AbstractExecutorService<--ThreadPoolExecutor
        2.Executor(接口)
        3.ExecutorService(继承Executor接口)
        4.Executors(工具类，帮助我们去快速创建线程池)
    3.线程池实现任务复用的原理
        1.相同的线程执行不同的任务
        2.源码分析
    4.线程池状态
        1.RUNNING:接受新任务并处理排队任务
        2.SHUTDOWN:不接受新任务，但处理排队任务
        3.STOP:不接受新任务，也不处理排队任务，并中断正在进行的任务
        4.TIDYING:中文是整洁，理解了中文就容易理解这个状态了：所有的任务都已终止workerCount为0时，线程会转换到TIDYING状态，并将运行terminate()钩子方法。
        5.TERMINATED:terminate()运行完成
    5.使用线程池的注意点
        1.避免任务堆积
        2.避免线程数过度增加
        3.排查线程泄漏